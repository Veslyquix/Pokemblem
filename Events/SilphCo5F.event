#define ChapterID SilphCo5FCh
#define GenericB UnitPokeTowerTrainer
#define WildLvl 35
#define TrainerL 40




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
//{ ; ReinforceEntry(ChapterID)
//Reinforce(0xF0, 1, ReinforcementUnits, 2, 4) 
//Reinforce(0xF1, 1, ReinforcementUnits, 3, 4) 
//}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
AllTrainersPostBattleTalk
END_MAIN



LocationBasedEvents:
House(0, ToSilphCo4F, 2,5) 
Stairs(0,10,4,10,4)
Stairs(0,10,4,10,4)
END_MAIN

ToSilphCo4F:
CheckTrainerFlag(0xEF) // based on unit IDs 0xE0-0xEF per chapter 
BEQ 20 rC r0 
ENUT SilphCoDefeated
LABEL 20 
ChapterTransition(SilphCo4FCh, 10,4) 
NoFade 
ENDA 

ToSilphCo1F:
ENUT SkipChTransitionFlag
CheckTrainerFlag(0xEF) // based on unit IDs 0xE0-0xEF per chapter 
BEQ 20 rC r0 
ENUT SilphCoDefeated
ForcedChapterTransition(SilphCo1FCh, 12,19) 
LABEL 20 // Cutscene prevents escape 
CALL CannotEscapeTrainerBattleEvent
LABEL 63 
NoFade 
ENDA 


MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
AREA 0 ToSilphCo1F [10,4][10,4]
AREA 0 NW_StatsDrained [2,14][2,14] // nw 
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(2,5) 
EscapeTileTerminator ; } 
#endif 

NW_StatsDrained:
PlayerInRange
CHECK_EVENTID CardKeyFlag 
BNE 99 sC s0 
DebuffUnit(0x7FFF, DefResDebuff) // -5 luk, -10 def/res
TutText(DefFeelsSapped)
LABEL 99 
NoFade 
ENDA 

// could hook $37588 (executed right when mine gfx ending) for other effects 
// this version shoves the unit away from the mine, but doesn't look good 
/*
NW_StatsDrained:
PlayerInRange
DebuffUnit(0x7FFF, 0x005AA000) // -5 luk, -10 def/skl/str
CHECK_COORDS 0x7fff 
SADD sB sC s0 
SET_ACTIVE 0
SVAL s2 0xFD 
SPAWN_NPC 0xFD [-1,-1] // invisible 
MOVENEXTTO 0x9 0x7FFE 0x7FFD  
ENUN 
TutText(DefFeelsSapped)
DISA 0xFD 
NoFade 
ENDA 
*/ 

// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
MineTrap(2,14)
MineTrap(2,14)
//MineTrap(2,15)
//MineTrap(2,15)
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)


//Save(15,5) 


//RockSmash(3,2)
//StrengthBoulder(4,3)

//RedPokeballTrap(28,12, ChapterID*2, SuperPotion)
//RedPokeballTrap(7,15, ChapterID*2, SuperPotion)

//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(19,4, (ChapterID*2)+1, HawkeyeID) // "silph scope" 
SkillAccessoryTrap(19,4, (ChapterID*2), SilphScopeID) // "silph scope" 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(17,15, ChapterID*2, RockyHelmetSkillID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)

//SkillScrollTrap(27,2, (ChapterID*2)+1, ChivalryID) 

//SignBTrap(16,22, ChapterID, 0x0) //no extra text 
//SignATrap(28,2, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 



//BerryTree(2,28,5)

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
//SpellScrollTrap(18,9, (ChapterID*2)+1, DoubleHit)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 




ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 


/*
LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(2,2,30,12)) //grass patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(5,12,30,23)) //grass patch 

LOAD1 0x1 EnemyUnitsC // Burrows
ENUN

AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Bushes  
*/

//CALL SetBushHpEvent
CheckTrainerFlag(0xEF) // based on unit IDs 0xE0-0xEF per chapter 
BNE 10 rC r0 
LOAD1 0x1 GiovanniBattleUnitGroup 
ENUN 
SetUnitStatus(0xEF, MovBonus, 8)
LABEL 10 

AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CHECK_EVENTID CardKeyFlag 
BEQ 99 sC s0 
ASMC RemoveAllMineTraps
LABEL 99
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

/*
// Wilds - SpearowID	BellsproutID

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI

UNIT 

EnemyUnitsB:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI

UNIT 

EnemyUnitsC:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT 0xF0 BurrowID 0x0 Level(0, Enemy, 1)   [9,4]  0b	0x0 0x01 REDA9R4  [0x0,0x0,0x0,0x0] BushAI
UNIT 0xF1 BurrowID 0x0 Level(0, Enemy, 1)   [17,20]  0b	0x0 0x01 REDA17R20  [0x0,0x0,0x0,0x0] BushAI
UNIT 


ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 
*/


{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xEF, 0, 0, 0, 1, 1, 0, 1, GiovanniUnits) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
BQ(0xF, SilphCo_Giovanni_Challenge)
TDQ_TableTerminator; 

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
BD(0xF, SilphCo_Giovanni_Defeat, 5000) 
TDQ_TableTerminator ; } 

GiovanniBattleUnitGroup:
UNIT 0xEF giovanniID 0x0 Level(0, Enemy, 1) [12,10]  0b 0x0	0x1 REDA12R10 [SevenRangeWep,0x0,0x0,0x0] TrainerBossAI
//UNIT GenericB	SquirtleID 0xE0 Level(0, Enemy, 1)   [9,30] 	0b	0x0 0x01 REDA9R30 [JellyDonut,0x0,0x0,0x0] PursueWithoutHeedAI 
//UNIT GenericB	OnixID 0xE0 Level(0, Enemy, 1)   [9,30] 	0b	0x0 0x01 REDA9R30 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT 



GiovanniUnits:
UNIT GenericB	NidorinoID 0xEF Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT GenericB 	RhyhornID 0xEF Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT GenericB 	SandslashID 0xEF Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT GenericB 	DugtrioID 0xEF 	Level(0, Enemy, 1)   [11,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT GenericB 	PoliwhirlID 0xEF Level(0, Enemy, 1)   [11,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT GenericB 	PersianID 0xEF Level(0, Enemy, 1)   [11,12] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI 
UNIT


#undef GenericB 
#undef WildLvl
#undef TrainerL
#undef ChapterID
