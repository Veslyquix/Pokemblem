#define ChapterID MtMoonB2Ch
#define GenericA UnitMtMoonWild
#define GenericB UnitMtMoonTrainer
#define ClassA ClassMtMoonB2WildA
#define ClassB ClassMtMoonB2WildB
#define WildLvl 10 
#define TrainerL 14 





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
//{ ; ReinforceEntry(ChapterID)
//Reinforce(0xF0, 1, BurrowReinforcementUnits, 6, 4) // West burrow 
//Reinforce(0xF1, 1, BurrowReinforcementUnits, 7, 4) // Mid-W Burrow 
//}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR 0 CallRevivePartyCostEvent [0x0, 0xE2] 0 // NPC
AllTrainersPostBattleTalk
END_MAIN

CallRevivePartyCostEvent:
SVAL s2 MtMoonNurseJoyText
SVAL s3 1000 // amount it costs 
CALL RevivePartyCostEvent
NoFade 
ENDA 

LocationBasedEvents:
House(0, ToRoute4E, 28,5) 
House(0, ToMtMoonB3_M, 11,30) 
House(0, ToMtMoonB3_NE, 13,14) 
House(0, ToMtMoonB3_E, 22,22) 
House(0, ToMtMoonB3_W, 20,6) 
House(0, ToMtMoonB1_W, 3,7) 
House(0, ToMtMoonB1_M, 19,14) 
House(0, ToMtMoonB1_E, 28,15) 
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN

#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(28,5) 
EscapeTileEntry(11,30) 
EscapeTileEntry(13,14) 
EscapeTileEntry(22,22) 
EscapeTileEntry(20,06) 
EscapeTileEntry(03,07) 
EscapeTileEntry(19,14) 
EscapeTileEntry(28,15) 
EscapeTileTerminator ; } 
#endif 

ToRoute4E:
ChapterTransition(Route4ECh, 5, 5)

ToMtMoonB3_NE:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB3Ch, 23,13)

ToMtMoonB3_M:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB3Ch, 12,30)

ToMtMoonB3_E:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB3Ch, 21,21)

ToMtMoonB3_W:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB3Ch, 5, 9)


ToMtMoonB1_M:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB1Ch, 15, 16)

ToMtMoonB1_W:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB1Ch, 5, 6)

ToMtMoonB1_E:
ENUT SkipChTransitionFlag
ChapterTransition(MtMoonB1Ch, 25,15)





// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(13,15,ChapterID*2,550)
//CoinsTrap(57,15,(ChapterID*2)+1,600)

//CutBush(4,2)
//RockSmash(3,2)
//StrengthBoulder(4,3)

RedPokeballTrap(29,22, ChapterID*2, Iron)
//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

SignBTrap(20,20, ChapterID, 0x0) //no extra text 
SignATrap(2,9, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
SpellScrollTrap(5,14, (ChapterID*2)+1, Harden)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
SaveCost(5,10) 


ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 

LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(2,20,23,22)) 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(9,16,29,30)) 
LOAD1 0x1 EnemyUnitsC 
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(2,7,6,19)) 
LOAD1 0x1 EnemyUnitsD
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(11,28,29,30))

LOAD1 0x1 EnemyUnitsE 
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(10,12,20,15))
LOAD1 0x1 EnemyUnitsF
ENUN
RandomizeEnemyCoords(Ground, Range(0,0,5,5), Range(19,03,29,6))


AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  
 // Burrows 
LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 
CALL SetBushHpEvent
MarkTrainerAsDefeated(0xE2) 
LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

// Wilds
EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsC:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 


EnemyUnitsD:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 

EnemyUnitsE:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 

EnemyUnitsF:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 

// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers0) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers1) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT MMB2_0xE0_BQ // 0xE0 
SHORT MMB2_0xE1_BQ // 0xE1
SHORT MMB2_0xE1_BQ // 0xE1
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT MMB2_0xE0_BD // 0xE0 
SHORT 300 // Gold 
SHORT MMB2_0xE1_BD // 0xE1
SHORT 550 // Gold 
SHORT MMB2_0xE1_BD // 0xE1
SHORT 550 // Gold 
TDQ_TableTerminator ; }

// all trainers with the same sprite will face the same direction! 
HumanTrainers:
UNIT 0xE0 super_nerdID 0x0 Level(LVFACELEFT, Enemy, 1) [8,20]  0b 0x0	0x1 REDA8R20 [FiveRangeWep,0x0,0x0,0x0] TrainerBossAI
UNIT 0xE1 super_nerdID 0x0 Level(LVFACELEFT, Enemy, 1) [29,30]  0b 0x0	0x1 REDA29R30 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE2 ReceptionistID 0x0 Level(0, Enemy, 1)   [5,7] 0	0x0 0x01 REDA5R7 [0x0,0x0,0x0,0x0] DoNothingAI
UNIT


// 9 / 16 - players + 4 unique objects + 3 unique trainers (BugCatcher, Lass, Camper) + weedle+caterpie 
// 7 / 16 - wild + trainer unique classes 
// Weedle, caterpie (not included in 7 count) 
// Sandshrew, Oddish, Spearow - wild mons 
// Rattata - reinforcement from burrows 
// jigglypuff trainer 
// vulpix, poliwag, oddish 

// b2 - voltorb, magnemite, pikachu, zubat, paras, 
EnemyTrainers0: // Nerd
//UNIT GenericB 	VoltorbID 0xE0 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	PikachuID 0xE0 	Level(0, Enemy, 1) [11,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	VoltorbID 0xE0 	Level(0, Enemy, 1) [12,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT

EnemyTrainers1: // Nerd 
UNIT GenericB 	VoltorbID 0xE1 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	PikachuID 0xE1 	Level(0, Enemy, 1) [11,10]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0]  SafestZoningGroupTwoAI
UNIT




	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID