#define ChapterID SSAnneCh
#define GenericA UnitSSAnneWild
#define GenericB UnitSSAnneTrainer
#define ClassA ClassSSAnneWildA
#define ClassB ClassSSAnneWildB
#define WildLvl 16 
#define TrainerL 20




EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)


END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
//{ ; ReinforceEntry(ChapterID)
//}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR ObtainedCutFlag CaptainHMevent [0x0, 0xE1] 0 // Captain 
TrainerPostBattleTalk(0xE1) // Captain talk again 
TrainerPostBattleTalk(0xE2) 
TrainerPostBattleTalk(0xE3) 
TrainerPostBattleTalk(0xE4) 
END_MAIN

CaptainHMevent:
BottomWallText(CaptainTeachHMText)
STAL 15 
EVBIT_MODIFY 4 
TutText(LearnedCutText)
NoFade
ENDA 


UpperBoat:
TutText(ClosedAreaText)
NoFade
ENDA 

LocationBasedEvents:
House(0, ToSSAnneDocks, 19,2) 
//House(0, UpperBoat, 2,6) 
END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID)  
EscapeTileEntry(19,2) 
EscapeTileTerminator ; } 
#endif 

ToSSAnneDocks:
ENUT SkipChTransitionFlag
CHECK_EVENTID PlayableCutsceneFlag 
BNE 20 rC r0 
ChapterTransition(SSAnneDocksCh, 21,14)

LABEL 20 // Cutscene prevents escape 
CALL CannotEscapeTrainerBattleEvent
LABEL 63 
NoFade 
ENDA 




// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
//CoinsTrap(29,18,ChapterID*2,450)
//CoinsTrap(57,15,(ChapterID*2)+1,600)

//CutBush(9,0)


SkillAccessoryTrap(22,23, (ChapterID*2)+1, PoisonStrikeID) 


//RockSmash(3,2)
//StrengthBoulder(4,3)

//RedPokeballTrap(16,35, ChapterID*2, SuperPotion)
//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//StatAccessoryTrap(14,2, (ChapterID*2)+1, OldWard_BoostIndex)
//SkillAccessoryTrap(17,15, ChapterID*2, RockyHelmetSkillID) 
//SkillScrollTrap(18,28, ChapterID*2, StrongRiposteID)
EnterWallTrap(2,6, DoorLockedText)
EnterWallTrap(5,20, DoorLockedText)
EnterWallTrap(9,20, DoorLockedText)
EnterWallTrap(13,20, DoorLockedText)
EnterWallTrap(17,20, DoorLockedText)
EnterWallTrap(5,9, DoorLockedText)
EnterWallTrap(8,9, DoorLockedText)
EnterWallTrap(11,9, DoorLockedText)
EnterWallTrap(14,9, DoorLockedText)
EnterWallTrap(17,9, DoorLockedText)

SpellScrollTrap(7,6, (ChapterID*2), BodySlam)

//SkillAccessoryTrap(5,5, (ChapterID*2), SealSpdID)


//SkillScrollTrap(17,18, (ChapterID*2)+1, PerfectionistID) 

SignBTrap(8,21, ChapterID, 0x0) //no extra text 
SignATrap(20,4, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 


//BerryTree(8,22,5)
//BerryTree(19,5,5)

//SkillScrollTrap(42,16, ChapterID*2, PatienceID)
//SpellScrollTrap(18,9, (ChapterID*2)+1, DoubleHit)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 
HealTile(12,22)

//Flower(38,9)



ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 



LOAD1 0x1 HumanTrainers
ENUN 

CALL SetBushHpEvent


LABEL 0
LOAD1 0x1 CaptainUnitGroup
LOAD1 0x1 HumanTrainers
ENUN 

CheckTrainerFlag(0xEF) // based on unit IDs 0xE0-0xEF per chapter 
BNE 10 rC r0 
LOAD1 0x1 GaryUnitGroup 
ENUN 
LABEL 10 
MarkTrainerAsDefeated(0xE1) 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 



// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xEF, 0, 0, 0, 1, 1, 0, 1, GaryUnitsA) 
MS_TableEntry(0xEF, 0, 0, 0, 1, 1, 0, 1, GaryUnitsB) 
MS_TableEntry(0xEF, 0, 0, 0, 1, 1, 0, 1, GaryUnitsC) 
MS_TableEntry(0xEF, 0, 0, 0, 1, 1, 0, 1, GaryUnitsD) 

MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers2) 
MS_TableEntry(0xE2, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers2) 
MS_TableEntry(0xE3, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers3) 
MS_TableEntry(0xE4, 0, 0, 0, 1, 1, 0, 1, EnemyTrainers4) 


MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
BQ(0xF, SSA_0xE0_BQ) // Gary 
SHORT SSA_0xE0_BQ // gary
SHORT SSA_0xE2_BQ // n/a
SHORT SSA_0xE2_BQ // 0xE0 
SHORT SSA_0xE3_BQ // 0xE0 
SHORT SSA_0xE4_BQ // 0xE0 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
BD(0xF, SSA_0xE0_BD, 1800) // Gary
SHORT SSA_0xE0_BD // gary
SHORT 1800 // Gold 
SHORT SSA_0xE1_BD // captain after HM obtained 
SHORT 600 // Gold 
SHORT SSA_0xE2_BD // 0xE0 
SHORT 500 // Gold 
SHORT SSA_0xE3_BD // 0xE0 
SHORT 750 // Gold 
SHORT SSA_0xE4_BD // 0xE0 
SHORT 800 // Gold 
TDQ_TableTerminator ; }

GaryUnitGroup:
UNIT 0xEF blueID 0x0 Level(LVFACELEFT, Enemy, 1) [27,17]  0b 0x0	0x0 0x0 [SevenRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 

CaptainUnitGroup:
UNIT 0xE1 captainID 0x0 Level(0, Enemy, 1) [28,6]  0b 0x0	0x1 REDA28R6 [0x0,0x0,0x0,0x0] DoNothing
UNIT


HumanTrainers:
UNIT 0xE2 sailorID 0x0 Level(0, Enemy, 1) [12,6]  0b 0x0	0x0 0x0 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE3 gentlemanID 0x0 Level(0, Enemy, 1) [5,20]  0b 0x0	0x0 0x0 [OneRangeWep,0x0,0x0,0x0] TrainerAI
//UNIT 0xE4 sailorID 0x0 Level(0, Enemy, 1) [2,14]  0b 0x0	0x0 0x0 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT



GaryUnitsA:
UNIT GenericB	IvysaurID 0xEF Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI
UNIT GenericB 	RaticateID 0xEF Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	BeedrillID 0xEF Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	KadabraID 0xEF Level(0, Enemy, 1)   [10,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
//UNIT GenericB 	PidgeottoID 0xEF Level(0, Enemy, 1)   [11,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	NidorinoID 0xEF Level(0, Enemy, 1)   [11,12] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT

GaryUnitsB:
UNIT GenericB	CharmeleonID 0xEF Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI
UNIT GenericB 	RaticateID 0xEF Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	BeedrillID 0xEF Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	KadabraID 0xEF Level(0, Enemy, 1)   [9,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
//UNIT GenericB 	PidgeottoID 0xEF Level(0, Enemy, 1)   [11,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	NidorinoID 0xEF Level(0, Enemy, 1)   [11,12] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT

GaryUnitsC:
UNIT GenericB	WartortleID 0xEF Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI
UNIT GenericB 	RaticateID 0xEF Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	BeedrillID 0xEF Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	KadabraID 0xEF Level(0, Enemy, 1)   [9,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
//UNIT GenericB 	PidgeottoID 0xEF Level(0, Enemy, 1)   [11,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	NidorinoID 0xEF Level(0, Enemy, 1)   [11,12] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT

GaryUnitsD:
UNIT GenericB	EeveeID 0xEF Level(0, Enemy, 1)   [9,9] 0b	0x0 	0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI
UNIT GenericB 	RaticateID 0xEF Level(0, Enemy, 1)   [9,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	BeedrillID 0xEF Level(0, Enemy, 1)   [11,9]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	KadabraID 0xEF Level(0, Enemy, 1)   [9,10]  0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
//UNIT GenericB 	PidgeottoID 0xEF Level(0, Enemy, 1)   [11,11] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT GenericB 	NidorinoID 0xEF Level(0, Enemy, 1)   [11,12] 0b	0x0 0x0  0x0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT


EnemyTrainers2: // sailor 
UNIT GenericB 	TentacoolID 0xE2 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	PidgeyID 0xE2 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB 	TentacoolID 0xE2 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT

EnemyTrainers3: // gentleman 
UNIT GenericB 	RattataID 0xE3 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	PidgeyID 0xE3 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	RattataID 0xE3 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT
	
EnemyTrainers4: // sailor 
UNIT GenericB 	TentacoolID 0xE4 	Level(0, Enemy, 1) [8,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	RattataID 0xE4		Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	PidgeyID 0xE4 	Level(0, Enemy, 1) [10,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
//UNIT GenericB 	TentacoolID 0xE4 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT
	
	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID