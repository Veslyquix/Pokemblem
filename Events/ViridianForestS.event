#define ChapterID ViridianForestSCh
#define GenericA UnitViridianForestSWild
#define GenericB UnitViridianForestSTrainer
#define ClassA ClassViridianForestSWildA
#define ClassB ClassViridianForestSWildB
#define WildLvl 4
#define TrainerL 8





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
TurnEventPlayer(DisableTutFlag_A, TutMsg1, 0, 255) // 

END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnits, 4, 4) // Top 
Reinforce(0xF1, 1, ReinforcementUnits, 3, 4) // Middle 
Reinforce(0xF2, 1, ReinforcementUnits, 2, 4) // Bottom 
}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
AllTrainersPostBattleTalk
END_MAIN



LocationBasedEvents:

END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
////AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToRoute2S [26,28] [28,28] 
AREA 0 ToViridianForestN_A [41,0] [42,0] 
AREA 0 ToViridianForestN_B [34,0] [37,0] 
//AFEV 0 RefreshIfNotInDanger 0 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(27,28) 
EscapeTileEntry(35,0) 
EscapeTileEntry(36,0) 
EscapeTileEntry(41,0) 
EscapeTileEntry(42,0) 
EscapeTileTerminator ; } 
#endif 

ToRoute2S:
ChapterTransition(Route2SCh, 5, 11)

ToViridianForestN_A:
ENUT SkipChTransitionFlag
ChapterTransition(ViridianForestNCh, 43, 31)

ToViridianForestN_B:
ENUT SkipChTransitionFlag
ChapterTransition(ViridianForestNCh, 37, 32)

TutMsg1: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0 
ENUF DisableTutFlag_A
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(35,0,45,27) 
BEQ 99 sC s0 
ENUT DisableTutFlag_A
EVBIT_MODIFY 4
PauseFreeMovement
STAL 5
CAM1 [39,11]
CUMO [39,11]
STAL 30
CURE  
TutText(TrainerTip_TMs_2)
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 

// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
HealTile(43,25)

//CoinsTrap(42,13,(ChapterID*2)+1,400)
SpellScrollTrap(42,13, (ChapterID*2)+1, AttackPulse)

SkillScrollTrap(18,0, (ChapterID*2)+2, TantivyID) // Found in next ch, so +2
//CutBush(4,2)
//RockSmash(3,2)
//StrengthBoulder(4,3)

RedPokeballTrap(16,35, ChapterID*2, SuperPotion)
//StatAccessoryTrap(17,20, (ChapterID*2), BronzeShield_BoostIndex) 
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 
//SkillAccessoryTrap(17,20, (ChapterID*2)+1, VantagePlusID) 

//SkillAccessoryTrap(28,14, ChapterID*2, VantagePlusID) - now in route 2s 

SignBTrap(42,4, ChapterID, 0x0) //no extra text 
SignATrap(28,25, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

//SkillScrollTrap(15,11, ChapterID*2, AcrobatID)
//SpellScrollTrap(17,11, (ChapterID*2)+1, Ember)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
SaveCost(42,7) 


BerryTree(27,9,5)
BerryTree(10,14,5)

TutSign(39,11,ChapterID*2, TrainerTip_TMs_2)
TutSign(25,24,ChapterID*2+1, TrainerTip_WildBosses)


ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 

///*
LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(29,4,38,25)) //ne patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(12,9,26,24)) //mid  
LOAD1 0x1 EnemyUnitsC
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(37,23,46,27)) //se
LOAD1 0x1 EnemyUnitsD
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(1,5,16,11))  //nw
LOAD1 0x1 EnemyUnitsE
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(1,21,10,27))  //sw

OffAllUnitState(0x01FF, WillDropItem, Any, EnemyArmy, AnyClass, AnyRange, AnyItem) //Wilds to not drop items 
AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  

LOAD1 0x1 BeedrillUnitGroup
ENUN 
UnmarkTrainerAsDefeated(0xEE)

LOAD1 0x1 HumanTrainers
ENUN 
AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 


CALL SetBushHpEvent

//SetUnitStatus(Eirika, CurrentHP, 5)
//*/
LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA
// 804f449 always true 
Dunno1:
//SHORT 0xE;SHORT 0; POIN 0; POIN UsableTrueTest
//AFEV 0 TeleportActiveUnitPrepEvent 0 // This activates when you select the unit
END_MAIN
Dunno2:
//AFEV 0 TeleportActiveUnitEvent 0 // This activates when you select the tile, but only 
// if the chapter has an AFEV in Dunno2
END_MAIN
Dunno3:
//AFEV 0 RefreshActiveUnitEvent 0 
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(5, Enemy, 1)   [0,1] 001b	0x0 0x01 REDA0R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,2] 001b	0x0 0x01 REDA0R2 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,3] 001b	0x0 0x01 REDA0R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,3] 001b	0x0 0x01 REDA1R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(5, Enemy, 1)   [2,3] 001b	0x0 0x01 REDA2R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF1 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT

EnemyUnitsC:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,4] 001b	0x0 0x01 REDA0R4 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF2 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsD:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,1] 001b	0x0 0x01 REDA1R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(5, Enemy, 1)   [1,2] 001b	0x0 0x01 REDA1R2 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsE:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(0, Enemy, 1)   [2,0] 001b	0x0 0x01 REDA1R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT


BeedrillUnitGroup:
UNIT 0xEE BeedrillID 0x0 Level(2, Enemy, 1)   [24,11] 0b	0x0 0x01 REDA24R11 [0x0,0x0,0x0,0x0] BeedrillAI
UNIT 


ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 

BossSummons: 
UNIT GenericA 	WeedleID		0xEE 	Level(0, Enemy, 1) [9,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupSevenAI
UNIT GenericA 	PikachuID 		0xEE 	Level(0, Enemy, 1) [11,11]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupSevenAI
UNIT GenericA 	CaterpieID 	0xEE 	Level(0, Enemy, 1) [10,10]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupSevenAI
//UNIT GenericA 	ClassA 		0xEE 	Level(0, Enemy, 1) [9,9]  1b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupSevenAI
//UNIT GenericA 	ClassA		0xEE 	Level(0, Enemy, 1) [11,9]  1b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupSevenAI
UNIT


// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersA) 
MS_TableEntry(0xEE, 0, 0, 0, 1, 1, 0, 1, BossSummons)  
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
BQ(0xE, 0x00)
SHORT VFS_0xE0_BQ // 0xE0 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
BD(0xE, 0x00, 0)
SHORT VFS_0xE0_BD // 0xE0 
SHORT 300 // Gold 
TDQ_TableTerminator ; }


HumanTrainers:
UNIT 0xE0 bug_catcherID 0x0 Level(0, Enemy, 1) [39,17]  0b 0x0	0x1 REDA39R17 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 


EnemyTrainersA:
UNIT GenericB 	CaterpieID	 0xE0 	Level(0, Enemy, 1) [9,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	MetapodID	 0xE0 	Level(0, Enemy, 1) [11,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT



	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID
