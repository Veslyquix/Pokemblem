#define ChapterID ViridianForestNCh
#define GenericA UnitViridianForestNWild
#define GenericB UnitViridianForestNTrainer
#define ClassA ClassViridianForestNWildA
#define ClassB ClassViridianForestNWildB
#define WildLvl 5 
#define TrainerL 9 





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
TurnEventPlayer(DisableTutFlag_A, TutMsg1, 0, 255) // 
TurnEventPlayer(DisableTutFlag_B, TutMsg2, 0, 255) // 

END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
{ ; ReinforceEntry(ChapterID)
Reinforce(0xF0, 1, ReinforcementUnits, 3, 4) // Se
Reinforce(0xF1, 1, ReinforcementUnits, 6, 4) // Middle 
Reinforce(0xF2, 1, ReinforcementUnits, 8, 4) // W-Mid
}


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
CHAR HiredPokemonFlag HireGeodudeevent [0x0, 0xE5] 0 // NPC
TrainerPostBattleTalk(0xE5) // NPC talk again 
AllTrainersPostBattleTalk
//TrainerPostBattleTalk(0xE0)
END_MAIN



LocationBasedEvents:

END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
//AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToRoute2N [4,7] [6,7] 
AREA 0 ToViridianForestS_A [43,32] [44,32] 
AREA 0 ToViridianForestS_B [36,32] [39,32] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(43,32) 
EscapeTileEntry(44,32) 
EscapeTileEntry(37,32) 
EscapeTileEntry(38,32) 
EscapeTileEntry(5,7) 
EscapeTileTerminator ; } 
#endif 

ToRoute2N:
ChapterTransition(Route2NCh, 6, 13)

ToViridianForestS_A:
ENUT SkipChTransitionFlag
ChapterTransition(ViridianForestSCh, 41, 0)

ToViridianForestS_B:
ENUT SkipChTransitionFlag
ChapterTransition(ViridianForestSCh, 35, 0)



TutMsg1: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0 
ENUF DisableTutFlag_A
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(19,3,35,23) 
BEQ 99 sC s0 
ENUT DisableTutFlag_A
EVBIT_MODIFY 4
PauseFreeMovement
STAL 5
CAM1 [26,21]
CUMO [26,21]
STAL 30
CURE  
TutText(TrainerTip_DangerZone2)
SVAL s1 ((ChapterID*2)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 

TutMsg2: 
CHECK_EVENTID DisableTutMsgsFlag
BNE 99 sC s0
ENUF DisableTutFlag_B 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC CheckNewFlag_ASMC 
BNE 99 sC s0 
CountPlayersInRange_ASMC(36,13,45,32) 
BEQ 99 sC s0 
ENUT DisableTutFlag_B
EVBIT_MODIFY 4
PauseFreeMovement
STAL 5
CAM1 [41,22]
CUMO [41,22]
STAL 30
CURE  
TutText(TrainerTip_Zoning) 
SVAL s1 ((ChapterID*2+1)+(HelpMsgFlagOffset<<3)) 
ASMC SetNewFlag_ASMC 
LABEL 99 
NoFade 
ENDA 

// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
CoinsTrap(36,18,ChapterID*2,450)
CoinsTrap(11,26,(ChapterID*2)+1,400)

HealTile(22,19)
//CutBush(4,2)
//RockSmash(3,2)
//StrengthBoulder(4,3)
SignTrap(26,21, TrainerTip_DangerZone2)
SignTrap(41,22, TrainerTip_Zoning)
//
StatAccessoryTrap(32,26, ChapterID*2, LeatherShield_BoostIndex)

RedPokeballTrap(36,25, (ChapterID*2)+1, Revive, 3)
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 

SignBTrap(6,10, ChapterID, 0x0) //no extra text 
SignATrap(44,28, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

SkillScrollTrap(20,30, ChapterID*2, TantivyID)
SpellScrollTrap(44, 14, (ChapterID*2)+1, LeechLife)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 


BerryTree(23,23,5)
BerryTree(41,21,5)
BerryTree(19,12,5)



ENDTRAP
ALIGN 4


HireGeodudeevent:
EVBIT_MODIFY 4 
WallText(HireGeodudeText)
LOAD1 1 HireGeodudeUnitGroup  
ENUN 
ENUT FIXED_GROWTHS_FLAG_ID
AutoLevelUnits(TrainerL, True,  HiredPokemonUnitID<<8|HiredPokemonUnitID)
PauseFreeMovement
SelectCharacter(HiredPokemonUnitID, 0, 0, 0, 0, 800, 0, 0, 0, 0) 
SVAL sB 0x100 
BEQ 10 sC sB 
GOTO 20

LABEL 10 
UNCR(0x7fff, 1) // SelectCharacter ends MMS 
WallText(No_HireGeodudeText)
ENUF HiredPokemonFlag
DISA HiredPokemonUnitID
GOTO 63

LABEL 20
CHECK_COORDS 0x7fff
SADD sB sC s0  
MOVENEXTTO (-1) HiredPokemonUnitID 0xE5   
ENUN 
SET_ACTIVE 0 // This fixes MMS from being hidden, but can cause a map camera centering graphical issue if main char is near/against the edge of the map 
WallText(Yes_HireGeodudeText)
AutoLevelUnits(5, True, (HiredPokemonUnitID<<0x8|HiredPokemonUnitID)) // Psyduck 
SilentGiveItemWithDurability(HiredPokemonUnitID, JellyDonut,0x5)
LABEL 63 
NoFade
ENDA 


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 


LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(27,23,32,27)) //se patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(27,10,33,20)) //ne 
LOAD1 0x1 EnemyUnitsC
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(19,10,23,20)) //mid e
LOAD1 0x1 EnemyUnitsD
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(11,10,15,24))  //m w
LOAD1 0x1 EnemyUnitsE
ENUN
RandomizeEnemyCoords(Grass, Range(0,0,5,5), Range(3,11,7,24))  //w


//OffAllUnitState(0x01FF, WillDropItem, Any, EnemyArmy, AnyClass, AnyRange, AnyItem) //Wilds to not drop items 
AutoLevelUnits(WildLvl, True, 0x50FF) // Wilds  

// Count trainer flags asmc ? 
LOAD1 0x1 HumanTrainers
ENUN 

AutoLevelUnits(TrainerL, True, 0xE0EF) // Trainers given visible levels 



LABEL 10 
//SetUnitStatus(2, CurrentHP, 5)
CALL SetBushHpEvent

MarkTrainerAsDefeated(0xE5) 

/*
LOAD1 1 HireGeodudeUnitGroup
ENUN 
MOVE (-1) HiredPokemonUnitID [43,26]
ENUN 
AutoLevelUnits(4, True, (HiredPokemonUnitID<<0x8|HiredPokemonUnitID)) // Psyduck 
SilentGiveItemWithDurability(HiredPokemonUnitID, JellyDonut,0x5)
*/

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

// Wilds
EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,3] 001b	0x0 0x01 REDA0R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsC:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [0,4] 001b	0x0 0x01 REDA0R4 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF1 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsD:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(5, Enemy, 1)   [1,1] 001b	0x0 0x01 REDA1R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF2 BushID 0x0 Level(0, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT

EnemyUnitsE:
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassB 0x0 Level(5, Enemy, 1)   [1,1] 001b	0x0 0x01 REDA1R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(0, Enemy, 1)   [1,2] 001b	0x0 0x01 REDA1R2 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(0, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackIfWithin2
UNIT 

// ChapterID is defined in each chapter.event. The { } brackets are necessary here. 
{ ; MS_ChTableEntry(ChapterID) // Modular Summon table per chapter 
// MS_TableEntry(UnitID, ClassID, LevelReq, FlagReq, PosType, MatchLvl, ResetStats, AllowDuplicates, UnitGroup)
MS_TableEntry(0xE0, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersA) 
MS_TableEntry(0xE1, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersB) 
MS_TableEntry(0xE2, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersC) 
MS_TableEntry(0xE3, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersD) 
MS_TableEntry(0xE4, 0, 0, 0, 1, 1, 0, 1, EnemyTrainersE) 
MS_TableTerminator ; } 

{ ; TQ_ChEntry(ChapterID) // Trainer's quotes when they spot you 
SHORT VF_0xE0_BQ // 0xE0 
SHORT VF_0xE1_BQ // 0xE1
SHORT VF_0xE2_BQ // 0xE2 
SHORT VF_0xE3_BQ // 0xE3 
SHORT VF_0xE4_BQ // 0xE4 
SHORT VF_0xE4_BQ // 0xE4 
TDQ_TableTerminator

TD_ChEntry(ChapterID) // Trainer's quotes when they're defeated  
SHORT VF_0xE0_BD // 0xE0 
SHORT 300 // Gold 
SHORT VF_0xE1_BD // 0xE1
SHORT 450 // Gold 
SHORT VF_0xE2_BD // 0xE2 
SHORT 400 // Gold 
SHORT VF_0xE3_BD // 0xE3 
SHORT 600 // Gold 
SHORT VF_0xE4_BD // 0xE4 
SHORT 900 // Gold 
SHORT HiredGeodudeText // 0xE4 
SHORT 900 // Gold 
TDQ_TableTerminator ; }

// all trainers with the same sprite will face the same direction! 
HumanTrainers:
UNIT 0xE0 bug_catcherID 0x0 Level(0, Enemy, 1) [39,18]  0b 0x0	0x1 REDA39R18 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE1 bug_catcherID 0x0 Level(0, Enemy, 1) [29,13]  0b 0x0	0x1 REDA29R13 [OneRangeWep,0x0,0x0,0x0] TrainerAI
//UNIT 0xE2 bug_catcherID 0x0 Level(0, Enemy, 1) [19,14]  0b 0x0	0x1 REDA19R14 [OneRangeWep,0x0,0x0,0x0] TrainerAI
UNIT 0xE3 bug_catcherID 0x0 Level(0, Enemy, 1) [12,8 ]  0b 0x0	0x1 REDA12R8  [OneRangeWep,0x0,0x0,0x0] TrainerFleeAI // This makes them run into a corner i think 
UNIT 0xE4 bug_catcherID 0x0 Level(0, Enemy, 1) [9,25]  0b 0x0	0x1 REDA9R25 [OneRangeWep,0x0,0x0,0x0] TrainerAI 
UNIT 0xE5 hikerID 		0x0 Level(0, Enemy, 1) [43,24]  0b 0x0	0x0 0 [0x0,0x0,0x0,0x0] DoNothing
UNIT

HireGeodudeUnitGroup:
UNIT HiredPokemonUnitID GeodudeID 0x0 Level(0, NPC, 1)   [0,0] 0b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] GuidePlayerAI
UNIT


EnemyTrainersA:
UNIT GenericB 	WeedleID 0xE0 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT GenericB 	KakunaID 0xE0 	Level(0, Enemy, 1) [12,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupFiveAI
UNIT

EnemyTrainersB:
UNIT GenericB	CaterpieID 0xE1 	Level(0, Enemy, 1) [ 8,10]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	CaterpieID 0xE1 	Level(0, Enemy, 1) [12,10]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT GenericB 	CaterpieID 0xE1 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupFourAI
UNIT

EnemyTrainersC:
UNIT GenericB 	PikachuID 0xE2 	Level(0, Enemy, 1) [ 8,12]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	CaterpieID 0xE2 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT GenericB 	WeedleID 0xE2 	Level(0, Enemy, 1) [12,12]  0b 0x0	0x0 0x0 [0x0,0x0,0x0,0x0] SafestZoningGroupThreeAI
UNIT

EnemyTrainersD:
UNIT GenericB 	MetapodID 0xE3 	Level(0, Enemy, 1) [ 8,12]  0b 0x0	0x0 0x00 [Headbutt, Tackle,0x0,0x0] SafestZoningGroupTwoAI
UNIT GenericB  KakunaID 0xE3 	Level(0, Enemy, 1) [10,12]  0b 0x0	0x0 0x00 [Headbutt, Tackle,0x0,0x0] SafestZoningGroupTwoAI
//UNIT GenericB 	CaterpieID 0xE3 	Level(0, Enemy, 1) [12,12]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupTwoAI
UNIT

EnemyTrainersE:
UNIT GenericB 	EkansID 0xE4 		Level(0, Enemy, 1) [8,8]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	WeedleID 0xE4 	Level(0, Enemy, 1) [10,8]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT GenericB 	CaterpieID 0xE4 	Level(0, Enemy, 1) [12,8]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] SafestZoningGroupOneAI
UNIT






	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID